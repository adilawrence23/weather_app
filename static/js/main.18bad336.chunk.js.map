{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","ClassName","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18bad336.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weather.style.css';\r\n\r\n\r\n\r\nconst Weather = props => {\r\n    return (\r\n        <div ClassName=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                </h5>\r\n                {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <>\r\n                <h3>\r\n                    <span className=\"px-4\">{min}&deg;</span>\r\n                    <span className=\"px-4\">{max}&deg;</span>\r\n                </h3>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error?error() :null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\"placeholder=\"Country\" />\r\n                    </div>\r\n                    <div className=\"col-md-3 md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    );\r\n}\r\nexport default Form;","\nimport './App.css';\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./app_component/weather.component\";\nimport React from 'react';\nimport Form from \"./app_component/form.component\";\n\n\n\n// api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\nconst API_key ='d41a03458664dd518df95c36eb009f80';\n\nclass App extends React.Component{\n  constructor(){\n  super();\n  this.state ={\n    city: undefined,\n    country: undefined,\n    icon: undefined,\n    main: undefined,\n    celsius: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    description: \"\",\n    error: false\n  };\n  \n\n  this.weatherIcon ={\n    Thunderstorm :\"wi-thunderstorm\",\n    Drizzle:\"wi-sleet\",\n    Rain:\"wi-storm-showers\",\n    Snow:\"wi-snow\",\n    Atmosphere:\"wi-fog\",\n    Clear:\"wi-day-sunny\",\n    Clouds:\"wi-day-fog\"\n  };\n}\n\ncalCelsius(temp){\n  let cell = Math.floor(temp -273.15);\n  return cell;\n}\n\nget_WeatherIcon(icons,rangeId){\n  switch(true){\n    case rangeId>=200 && rangeId<=232:\n      this.setState({icon:this.weatherIcon.Thunderstorm});\n      break;\n      case rangeId>=300 && rangeId<=321:\n      this.setState({icon:this.weatherIcon.Drizzle});\n      break;\n      case rangeId>=500 && rangeId<=531:\n      this.setState({icon:this.weatherIcon.Rain});\n      break;\n      case rangeId>=600 && rangeId<=622:\n      this.setState({icon:this.weatherIcon.Snow});\n      break;\n      case rangeId>=701 && rangeId<=781:\n      this.setState({icon:this.weatherIcon.Atmosphere});\n      break;\n      case rangeId>=800:\n      this.setState({icon:this.weatherIcon.Clear});\n      break;\n      case rangeId>=801 && rangeId<=804:\n      this.setState({icon:this.weatherIcon.Clouds});\n      break;\n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n\n  }\n} \n\ngetWeather =async (e)=>{\n  e.preventDefault();\n\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n\n\n  if(city && country){\n  const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\nconst response = await api_call.json();\n\nconsole.log(response);\n\nthis.setState({\n  city: `${response.name},${response.sys.country}`,\n  celsius: this.calCelsius(response.main.temp),\n  temp_max: this.calCelsius(response.main.temp_max),\n  temp_min: this.calCelsius(response.main.temp_min),\n  description:response.weather[0].description,\n  error:false\n});\n\nthis.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }else{\n    this.setState({error : true});\n  }\n};\n  render(){\n    return (\n      <>\n        <div className=\"App\">\n          <Form loadweather={this.getWeather} error={this.state.error}/>\n          <Weather city={this.state.city} country={this.state.country}temp_celsius={this.state.celsius}temp_max={this.state.temp_max}temp_min={this.state.temp_min}description={this.state.description}weatherIcon={this.state.icon}/>\n        </div>\n\n        <div className=\"malta\">\n          <p className=\"malt\">Â© AdiRay 2021</p>\n        </div>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}